<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PersonController
 */
class PersonControllerTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * @test
     */
    public function assistants_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('assistants'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function bishops_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('bishops'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function boardmembers_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('boardmembers'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function captains_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('captains'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function catholics_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('catholics'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('person.create'));

        $response->assertOk();
        $response->assertViewIs('persons.create');
        $response->assertViewHas('parish_list');
        $response->assertViewHas('ethnicities');
        $response->assertViewHas('states');
        $response->assertViewHas('countries');
        $response->assertViewHas('suffixes');
        $response->assertViewHas('prefixes');
        $response->assertViewHas('languages');
        $response->assertViewHas('genders');
        $response->assertViewHas('religions');
        $response->assertViewHas('occupations');
        $response->assertViewHas('contact_types');
        $response->assertViewHas('subcontact_types');
        $response->assertViewHas('referrals');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function deacons_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('deacons'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function deceased_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('deceased'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('person.destroy', ['person' => $person]));

        $response->assertRedirect(action('PersonController@index'));
        $this->assertDeleted($person);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function directors_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('directors'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function donors_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('donors'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function duplicates_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('duplicates'));

        $response->assertOk();
        $response->assertViewIs('persons.duplicates');
        $response->assertViewHas('duplicates');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('person.edit', ['person' => $person]));

        $response->assertOk();
        $response->assertViewIs('persons.edit');
        $response->assertViewHas('prefixes');
        $response->assertViewHas('suffixes');
        $response->assertViewHas('person');
        $response->assertViewHas('parish_list');
        $response->assertViewHas('ethnicities');
        $response->assertViewHas('states');
        $response->assertViewHas('countries');
        $response->assertViewHas('genders');
        $response->assertViewHas('languages');
        $response->assertViewHas('defaults');
        $response->assertViewHas('religions');
        $response->assertViewHas('occupations');
        $response->assertViewHas('contact_types');
        $response->assertViewHas('subcontact_types');
        $response->assertViewHas('referrals');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function envelope_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('envelope', ['id' => $id]));

        $response->assertRedirect(action('PersonController@show', $person->id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function formerboard_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('formerboard'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_displays_paginated_contacts_contacts()
    {
        $persons = [];
//        $user = factory(\App\User::class)->create();
//        $user->assignRole('admin');
        $user = $this->createUserWithPermission('show-contact');

        $response = $this->actingAs($user)->get(route('person.index'));

        $response->assertOk();
        $response->assertViewIs('persons.index');
        $response->assertViewHas('persons');
    }

    /**
     * @test
     */
    public function index_returns_403_without_proper_permission()
    {
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('person.index'));

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function innkeepers_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('innkeepers'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function jesuits_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('jesuits'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function lastnames_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('lastnames'));

        $response->assertOk();
        $response->assertViewIs('persons.index');
        $response->assertViewHas('persons');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function merge_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('merge', ['contact_id' => $contact_id]));

        $response->assertRedirect(action('PersonController@duplicates'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function merge_destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('merge_delete', ['id' => $id, 'return_id' => $return_id]));

        $response->assertRedirect(action('PersonController@merge', $return_id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function pastors_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('pastors'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function priests_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('priests'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function provincials_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('provincials'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function retreatants_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('retreatants'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('person.show', ['person' => $person]));

        $response->assertOk();
        $response->assertViewIs('persons.show');
        $response->assertViewHas('person');
        $response->assertViewHas('files');
        $response->assertViewHas('relationship_types');
        $response->assertViewHas('touchpoints');
        $response->assertViewHas('registrations');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function staff_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('staff'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function stewards_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('stewards'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('person.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('PersonController@show', $person->id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\PersonController::class,
            'store',
            \App\Http\Requests\StorePersonRequest::class
        );
    }

    /**
     * @test
     */
    public function superiors_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('superiors'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('person.update', ['person' => $person]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('PersonController@show', $person->id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\PersonController::class,
            'update',
            \App\Http\Requests\UpdatePersonRequest::class
        );
    }

    /**
     * @test
     */
    public function volunteers_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('volunteers'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
    private function createUserWithPermission(string $permission, array $data = [])
    {
        $reference = \App\Permission::where('name', $permission)->first();
        if (is_null($reference)) {
            throw new \InvalidArgumentException('permission does not exist: ' . $reference);
        }

        $role = \App\Role::where('name', 'test-role:' . $permission)->first();
        if (is_null($role)) {
            throw new \InvalidArgumentException('A test role for the permission (' . $permission. ') does not exist. Did you run the seeder?');
        }

        $user = factory(\App\User::class)->create($data);
        $user->assignRole($role->name);

        return $user;
    }
}
