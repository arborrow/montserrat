<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\TouchpointController
 */
class TouchpointControllerTest extends TestCase
{
    // use RefreshDatabase;

    /**
     * @test
     */
    public function add_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('touchpoint/add/{id?}');

        $response->assertOk();
        $response->assertViewIs('touchpoints.create');
        $response->assertViewHas('staff');
        $response->assertViewHas('persons');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function add_group_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('group/{group_id?}/touchpoint');

        $response->assertOk();
        $response->assertViewIs('touchpoints.add_group');
        $response->assertViewHas('staff');
        $response->assertViewHas('groups');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function add_retreat_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $touchpoint = factory(\App\Touchpoint::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('retreat/{event_id}/touchpoint');

        $response->assertOk();
        $response->assertViewIs('touchpoints.add_retreat');
        $response->assertViewHas('staff');
        $response->assertViewHas('retreat');
        $response->assertViewHas('retreats');
        $response->assertViewHas('participants');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function add_retreat_waitlist_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $touchpoint = factory(\App\Touchpoint::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('retreat/{event_id}/waitlist_touchpoint');

        $response->assertOk();
        $response->assertViewIs('touchpoints.add_retreat_waitlist');
        $response->assertViewHas('staff');
        $response->assertViewHas('retreat');
        $response->assertViewHas('retreats');
        $response->assertViewHas('participants');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('touchpoint.create'));

        $response->assertOk();
        $response->assertViewIs('touchpoints.create');
        $response->assertViewHas('staff');
        $response->assertViewHas('persons');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $touchpoint = factory(\App\Touchpoint::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('touchpoint.destroy', [$touchpoint]));

        $response->assertRedirect(action('TouchpointController@index'));
        $this->assertDeleted($touchpoint);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $touchpoint = factory(\App\Touchpoint::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('touchpoint.edit', [$touchpoint]));

        $response->assertOk();
        $response->assertViewIs('touchpoints.edit');
        $response->assertViewHas('touchpoint');
        $response->assertViewHas('staff');
        $response->assertViewHas('persons');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('touchpoint.index'));

        $response->assertOk();
        $response->assertViewIs('touchpoints.index');
        $response->assertViewHas('touchpoints');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $touchpoint = factory(\App\Touchpoint::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('touchpoint.show', [$touchpoint]));

        $response->assertOk();
        $response->assertViewIs('touchpoints.show');
        $response->assertViewHas('touchpoint');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('touchpoint.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('TouchpointController@index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\TouchpointController::class,
            'store',
            \App\Http\Requests\StoreTouchpointRequest::class
        );
    }

    /**
     * @test
     */
    public function store_group_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post('touchpoint/add_group', [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('GroupController@show', $group_id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_group_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\TouchpointController::class,
            'store_group',
            \App\Http\Requests\StoreGroupTouchpointRequest::class
        );
    }

    /**
     * @test
     */
    public function store_retreat_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post('touchpoint/add_retreat', [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('RetreatController@show', $event_id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_retreat_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\TouchpointController::class,
            'store_retreat',
            \App\Http\Requests\StoreRetreatTouchpointRequest::class
        );
    }

    /**
     * @test
     */
    public function store_retreat_waitlist_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post('touchpoint/add_retreat_waitlist', [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('RetreatController@show', $event_id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_retreat_waitlist_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\TouchpointController::class,
            'store_retreat_waitlist',
            \App\Http\Requests\StoreRetreatWaitlistTouchpointRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $touchpoint = factory(\App\Touchpoint::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('touchpoint.update', [$touchpoint]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('TouchpointController@index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\TouchpointController::class,
            'update',
            \App\Http\Requests\UpdateTouchpointRequest::class
        );
    }

    // test cases...
}
