<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PaymentController
 */
class PaymentControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $payment = factory(\App\Payment::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('payment/create/{donation_id}');

        $response->assertOk();
        $response->assertViewIs('payments.create');
        $response->assertViewHas('donation');
        $response->assertViewHas('payment_methods');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $payment = factory(\App\Payment::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('payment.destroy', [$payment]));

        $response->assertRedirect(action('DonationController@show', $payment->donation_id));
        $this->assertDeleted($payment);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $payment = factory(\App\Payment::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('payment.edit', [$payment]));

        $response->assertOk();
        $response->assertViewIs('payments.edit');
        $response->assertViewHas('payment');
        $response->assertViewHas('payment_methods');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('payment.index'));

        $response->assertOk();
        $response->assertViewIs('payments.index');
        $response->assertViewHas('payments');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $payment = factory(\App\Payment::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('payment.show', [$payment]));

        $response->assertOk();
        $response->assertViewIs('payments.show');
        $response->assertViewHas('payment');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('payment.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('DonationController@show', $donation->donation_id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\PaymentController::class,
            'store',
            \App\Http\Requests\StorePaymentRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $payment = factory(\App\Payment::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('payment.update', [$payment]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('DonationController@show', $payment->donation_id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\PaymentController::class,
            'update',
            \App\Http\Requests\UpdatePaymentRequest::class
        );
    }

    // test cases...
}
