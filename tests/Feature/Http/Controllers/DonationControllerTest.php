<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\DonationController
 */
class DonationControllerTest extends TestCase
{
    // use RefreshDatabase;

    /**
     * @test
     */
    public function agc_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('agc/{year?}');

        $response->assertOk();
        $response->assertViewIs('donations.agc');
        $response->assertViewHas('donations');
        $response->assertViewHas('total');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('donation.create'));

        $response->assertOk();
        $response->assertViewIs('donations.create');
        $response->assertViewHas('retreats');
        $response->assertViewHas('donors');
        $response->assertViewHas('descriptions');
        $response->assertViewHas('payment_methods');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $donation = factory(\App\Donation::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('donation.destroy', [$donation]));

        $response->assertRedirect(to($contact->contact_url));
        $this->assertDeleted($donation);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $donation = factory(\App\Donation::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('donation.edit', [$donation]));

        $response->assertOk();
        $response->assertViewIs('donations.edit');
        $response->assertViewHas('donation');
        $response->assertViewHas('descriptions');
        $response->assertViewHas('defaults');
        $response->assertViewHas('retreats');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('donation.index'));

        $response->assertOk();
        $response->assertViewIs('donations.index');
        $response->assertViewHas('donations');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function overpaid_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('donation/overpaid');

        $response->assertOk();
        $response->assertViewIs('donations.overpaid');
        $response->assertViewHas('overpaid');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function retreat_payments_update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('retreat.payments.update'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('RetreatController@show', $request->input('event_id')));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $donation = factory(\App\Donation::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('donation.show', [$donation]));

        $response->assertOk();
        $response->assertViewIs('donations.show');
        $response->assertViewHas('donation');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('donation.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect($donation->contact->contact_url.'#donations');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\DonationController::class,
            'store',
            \App\Http\Requests\StoreDonationRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $donation = factory(\App\Donation::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('donation.update', [$donation]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('DonationController@show', $donation->donation_id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\DonationController::class,
            'update',
            \App\Http\Requests\UpdateDonationRequest::class
        );
    }

    // test cases...
}
