<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PermissionController
 */
class PermissionControllerTest extends TestCase
{
    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('permission.create'));

        $response->assertOk();
        $response->assertViewIs('admin.permissions.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $permission = factory(\App\Permission::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('permission.destroy', [$permission]));

        $response->assertRedirect(action('PermissionController@index'));
        $this->assertDeleted($permission);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $permission = factory(\App\Permission::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('permission.edit', [$permission]));

        $response->assertOk();
        $response->assertViewIs('admin.permissions.edit');
        $response->assertViewHas('permission');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('permission.index'));

        $response->assertOk();
        $response->assertViewIs('admin.permissions.index');
        $response->assertViewHas('permissions');
        $response->assertViewHas('actions');
        $response->assertViewHas('models');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $permission = factory(\App\Permission::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('permission.show', [$permission]));

        $response->assertOk();
        $response->assertViewIs('admin.permissions.show');
        $response->assertViewHas('permission');
        $response->assertViewHas('roles');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('permission.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $permission = factory(\App\Permission::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('permission.update', [$permission]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('PermissionController@index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_roles_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('admin.permission.update_roles'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('PermissionController@index'));

        // TODO: perform additional assertions
    }

    // test cases...
}
