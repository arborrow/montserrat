<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\RelationshipTypeController
 */
class RelationshipTypeControllerTest extends TestCase
{
    // use RefreshDatabase;

    /**
     * @test
     */
    public function add_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $relationship_type = factory(\App\RelationshipType::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('relationship_type.add', ['id' => $relationship_type->id]));

        $response->assertOk();
        $response->assertViewIs('relationships.types.add');
        $response->assertViewHas('relationship_type');
        $response->assertViewHas('contact_a_list');
        $response->assertViewHas('contact_b_list');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function addme_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('relationship_type.addme'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('relationship_type.add', ['id' => $relationship_type_id, 'a' => $contact_id]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function addme_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\RelationshipTypeController::class,
            'addme',
            \App\Http\Requests\AddmeRelationshipTypeRequest::class
        );
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('relationship_type.create'));

        $response->assertOk();
        $response->assertViewIs('relationships.types.create');
        $response->assertViewHas('contact_types');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $relationship_type = factory(\App\RelationshipType::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('relationship_type.destroy', [$relationship_type]));

        $response->assertRedirect(action('RelationshipTypeController@index'));
        $this->assertDeleted($relationship_type);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $relationship_type = factory(\App\RelationshipType::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('relationship_type.edit', [$relationship_type]));

        $response->assertOk();
        $response->assertViewIs('relationships.types.edit');
        $response->assertViewHas('relationship_type');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('relationship_type.index'));

        $response->assertOk();
        $response->assertViewIs('relationships.types.index');
        $response->assertViewHas('relationship_types');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function make_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post('relationship/add', [
            // TODO: send request data
        ]);

        $response->assertRedirect(to($contact->contact_url));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function make_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\RelationshipTypeController::class,
            'make',
            \App\Http\Requests\MakeRelationshipTypeRequest::class
        );
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $relationship_type = factory(\App\RelationshipType::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('relationship_type.show', [$relationship_type]));

        $response->assertOk();
        $response->assertViewIs('relationships.types.show');
        $response->assertViewHas('relationship_type');
        $response->assertViewHas('relationships');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('relationship_type.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('RelationshipTypeController@index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\RelationshipTypeController::class,
            'store',
            \App\Http\Requests\StoreRelationshipTypeRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $relationship_type = factory(\App\RelationshipType::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('relationship_type.update', [$relationship_type]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('RelationshipTypeController@index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\RelationshipTypeController::class,
            'update',
            \App\Http\Requests\UpdateRelationshipTypeRequest::class
        );
    }

    // test cases...
}
