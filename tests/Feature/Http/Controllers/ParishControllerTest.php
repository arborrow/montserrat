<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\ParishController
 */
class ParishControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('parish.create'));

        $response->assertOk();
        $response->assertViewIs('parishes.create');
        $response->assertViewHas('dioceses');
        $response->assertViewHas('pastors');
        $response->assertViewHas('states');
        $response->assertViewHas('countries');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $parish = factory(\App\Parish::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete(route('parish.destroy', [$parish]));

        $response->assertRedirect(action('ParishController@index'));
        $this->assertDeleted($parish);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $parish = factory(\App\Parish::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('parish.edit', [$parish]));

        $response->assertOk();
        $response->assertViewIs('parishes.edit');
        $response->assertViewHas('parish');
        $response->assertViewHas('dioceses');
        $response->assertViewHas('pastors');
        $response->assertViewHas('states');
        $response->assertViewHas('countries');
        $response->assertViewHas('defaults');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('parish.index'));

        $response->assertOk();
        $response->assertViewIs('parishes.index');
        $response->assertViewHas('parishes');
        $response->assertViewHas('dioceses');
        $response->assertViewHas('diocese');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function parish_index_by_diocese_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $parish = factory(\App\Parish::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('parishes/diocese/{diocese_id}');

        $response->assertOk();
        $response->assertViewIs('parishes.index');
        $response->assertViewHas('parishes');
        $response->assertViewHas('dioceses');
        $response->assertViewHas('diocese');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $parish = factory(\App\Parish::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get(route('parish.show', [$parish]));

        $response->assertOk();
        $response->assertViewIs('parishes.show');
        $response->assertViewHas('parish');
        $response->assertViewHas('files');
        $response->assertViewHas('relationship_types');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post(route('parish.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('ParishController@index'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\ParishController::class,
            'store',
            \App\Http\Requests\StoreParishRequest::class
        );
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $parish = factory(\App\Parish::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->put(route('parish.update', [$parish]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(action('ParishController@show', $parish->id));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\ParishController::class,
            'update',
            \App\Http\Requests\UpdateParishRequest::class
        );
    }

    // test cases...
}
